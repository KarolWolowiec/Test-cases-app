@page "/testcases/add"
@inject IDbContextFactory<TestCasesManagerDbContext> ContextFactory
<PageTitle>Add Test Case</PageTitle>

<h1>Add Test Case</h1>

@if (TestCase is not null)
{
    //display html form
    <EditForm Model="@TestCase" OnValidSubmit="@HandleValidSubmit"
        OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <!--Title field-->
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control"
                   @bind-Value="TestCase.Title" />
            <ValidationMessage For="() => TestCase.Title" />
        </div>
        <!--Description field-->
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputText id="description" class="form-control"
                   @bind-Value="TestCase.Description" />
            <ValidationMessage For="() => TestCase.Description" />
        </div>
        <!--Category dropdown list-->
        <div class="mb-3">
            <label for="category" class="form-label">Category</label>
            <InputSelect id="category" class="form-select"
                     @bind-Value="TestCase.CategoryId">
                @if (Categories is not null)
                {
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary" disabled="@IsBusy">Add</button>
    </EditForm>
    <!--Display success/error messages-->
    @if(SuccessMessage is not null)
    {
        <br />
        <div class="alert alert-success">@SuccessMessage</div>
    }
    @if (ErrorMessage is not null)
    {
        <br />
        <div class="alert alert-danger">@ErrorMessage</div>
    }
}
@code {
    private TestCase? TestCase { get; set; }

    private Category[]? Categories { get; set; }

    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }

    //prevent adding a new item when a method is already running
    public bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //load categories from db
        using var context = ContextFactory.CreateDbContext();

        Categories = await context.Categories
                                   .OrderBy(catg => catg.Name)
                                   .ToArrayAsync();

        TestCase = new()
            {
                CategoryId = Categories.FirstOrDefault()?.Id
            };


    }

    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;

        //save a test case to a db
        try
        {
            if (TestCase is not null)
            {
                using var context = ContextFactory.CreateDbContext();

                context.TestCases.Add(TestCase);
                await context.SaveChangesAsync();

                SuccessMessage = $"Test case '{TestCase.Title}' was added successfully.";
                ErrorMessage = null;

                TestCase = new()
                    {
                        CategoryId = TestCase.CategoryId
                    };
            }
        }
        catch(Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding a test case: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }
}
