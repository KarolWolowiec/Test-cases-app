@page "/testcases/add"
@inject IDbContextFactory<TestCasesManagerDbContext> ContextFactory
<PageTitle>Add Test Case</PageTitle>

<h1>Add Test Case</h1>

<TestCaseForm TestCase="@TestCase"
 Categories="@Categories"
 IsBusy="@IsBusy"/>

<!--Display success/error messages-->

@if (SuccessMessage is not null)
{
    <br />
    <div class="alert alert-success">@SuccessMessage</div>
}
@if (ErrorMessage is not null)
{
    <br />
    <div class="alert alert-danger">@ErrorMessage</div>
}
@code {
    private TestCase? TestCase { get; set; }

    private Category[]? Categories { get; set; }

    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }

    //prevent adding a new item when a method is already running
    public bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //load categories from db
        using var context = ContextFactory.CreateDbContext();

        Categories = await context.Categories
                                   .OrderBy(catg => catg.Name)
                                   .ToArrayAsync();

        TestCase = new()
            {
                CategoryId = Categories.FirstOrDefault()?.Id
            };


    }

    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;

        //save a test case to a db
        try
        {
            if (TestCase is not null)
            {
                using var context = ContextFactory.CreateDbContext();

                context.TestCases.Add(TestCase);
                await context.SaveChangesAsync();

                SuccessMessage = $"Test case '{TestCase.Title}' was added successfully.";
                ErrorMessage = null;

                TestCase = new()
                    {
                        CategoryId = TestCase.CategoryId
                    };
            }
        }
        catch(Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding a test case: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }
}
