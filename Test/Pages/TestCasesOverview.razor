@page "/testcases/list"
@page "/testcases/list/{currentPage:int?}"

@inject IDbContextFactory<TestCasesManagerDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@inject IJSRuntime JS

<PageTitle>Test Cases</PageTitle>

<h1>Test Cases</h1>

@if(TestCases is null)
{
    <div>Loading...</div>
}else
{   //previous button
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/testcases/list/@(CurrentPage - 1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {   
            //added buttons to select a specific page
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="testcases/list/@i"> @i</a>
            </li>
        }
        <!--next button-->
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/testcases/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>

    //insert html table with data from TestCasesManagerDb
    <table class="table table-striped">
        <thread>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>Category</th>
                <th>#</th>
            </tr>
        </thread>
        <tbody>
            @foreach(var testCase in TestCases)
            {
                <tr>
                    <td>@testCase.Id</td>
                    <td>@testCase.Title</td>
                    <td>@testCase.Description</td>
                    <td>@testCase.Category?.Name</td>
                    <td class="btn-group-sm">
                        <a href="/testcases/edit/@testCase.Id"
                            class="btn btn-outline-primary btn-sm">
                            Edit
                        </a>
                        <button class="btn btn-outline-danger"
                            @onclick="() => HandleDelete(testCase)">
                            Delete
                        </button>
                    </td>
                </tr> 
            }
        </tbody>
    </table>


}
@code{
    [Parameter]
    public int? CurrentPage { get; set; }

    private TestCase[]? TestCases{ get; set; }

    private int TotalPages { get; set; }

    private const int ItemsPerPage = 4;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    //handler to load data from db
    private async Task LoadData()
    {
        //handler to a too low CurrentPage value eg. /testcases/list/-1
        if(CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/testcases/list/1");
            return; 
        }

        using var context = ContextFactory.CreateDbContext();

        //handler to a too high CurrentPage value eg. /testcases/list/9999999
        var testCasesCount = await context.TestCases.CountAsync();
        TotalPages = testCasesCount == 0
        ? 1
        : (int)Math.Ceiling((double)testCasesCount / ItemsPerPage);

        if(CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"/testCases/list/{TotalPages}");
            return;
        }

        StateContainer.TestCaseOverviewPage = CurrentPage.Value;

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        TestCases = await context.TestCases
        .Include(tst => tst.Category)
        .OrderBy(tst => tst.Id)
        .Skip(itemsToSkip)
        .Take(ItemsPerPage)
        .ToArrayAsync();
    }
    //handler to delete item from db
    private async Task HandleDelete(TestCase testCase)
    {
        //confirmation pop-up when deleting an item
        var isOk = await JS.InvokeAsync<bool>("confirm",
        $"Delete test case {testCase.Title}?");

        if (isOk)
        {
            using var context = ContextFactory.CreateDbContext();
            context.TestCases.Remove(testCase);
            await context.SaveChangesAsync();

            await LoadData();
        }
    }
}